<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[music is soft]]></title>
    <url>%2F2019%2F07%2F15%2Fodds1%2F</url>
    <content type="text"><![CDATA[hi,前端要不要记代码？我想我们需要多思考，不要做简单的体力劳动今天再写 login 时，考虑要不要写个验证码，插件？纯写？让后端写？后来我找不到好的 blog,也找不到插件，于是放弃了。我常常想，我现在的放弃，是不是将来找工作的将就或是无奈。 U LAUGH LIKE A GOOD WEATHER MY LIFE IS BRILLIANT]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[父子通信]]></title>
    <url>%2F2019%2F07%2F15%2Fparent-child%2F</url>
    <content type="text"><![CDATA[前言记忆力你怎么这么秀？复习复习复习 @Hazelnut ## class&amp;functionclass 里必须是this.props.namefunction component 里是props.name 父组件向子组件传参，子组件拿到父组件的 state,子组件里 props 渲染出来 这时候父组件里 123constructor(props)&#123;super(props)&#125; 可有可无，都没什么关系。 子组件传参数给父组件——标题看似是子传父，其实是父传子。子组件要想把改变的参数传给父组件，其实是“状态提升”，在父组件里写 state,子组件里拿 props, 其实就等同于父传子。唯一特别的就是，往往把“本来在子组件改变状态的方法”移到父组件去，这样父组件，子组件都能通过这个方法拿到 state。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[login]]></title>
    <url>%2F2019%2F07%2F15%2Flogin%2F</url>
    <content type="text"><![CDATA[多思考，少做简单的体力活CSS 布局1234567891011121314.login-card &#123; min-height: 100vh; width: 100%; display: flex; /* 长宽都占满 flex布局 */ /* align-items: center; //上下 */ /* justify-conrent: center; //左右 */ /* 垂直居中 */ background-image: url(../../img/bg.JPG); background-size: 100% 100%; /* 宽、高 */ background-repeat: no-repeat; /* 不重叠 */&#125; axios fetch 要自己设置header:Content-Type:application/json axios 默认json 永远的迷/坑（无奈）12345axios .post(LOGIN_URL, values) // .then(res =&gt; res.json()) .then(response =&gt; &#123; ... axios 的res的body自己套了一个 data？ let res = response.data 细节成就你123if (response.status == 200) &#123; if (res.code == 0) &#123; ... 加上status和code]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react_Table]]></title>
    <url>%2F2019%2F05%2F22%2Ftable%2F</url>
    <content type="text"><![CDATA[Table功能增删改查 用record指明某条数据它主要是针对一条数据进行操作 我刚刚发现我一开始的写法不知道在干嘛。。 如何使 react 的索引 key –&gt; 指向数据库的 id123456789//在requireList()里this.setState(&#123; list: res.list.map((item, index) =&gt; &#123; item.key = item.index return item &#125;)&#125;)//这个index是索引的意思，但是对我传数据一点没用。今天看到说，key是方便react修改虚拟dom的，可以提高性能//这个item 就是一条条数据 12345678//在requireList()里this.setState(&#123; list: res.list.map(item =&gt; &#123; item.key = item.id return item &#125;)&#125;)//这个item 就是一条条数据 之后貌似不用一直依赖于这个 record 了==&gt;item.key就可以对数据操作了 用selectedRows和selectedKeys指明多条数据它主要针对多条数据的操作，会涉及到 radio/checkbox 的样式，如果不是批量编辑，就需要限制 checkbox 打钩的个数 必须知道的东西key&amp;selectedRowkeys&amp;rowKey&amp;selectedRows key和rowKey是一个东西selectedRowkeys是选中的这条数据的 key 值selectedRows是选中的这条数据的所有字段的值（就是这条数据）选择数据的有单选框和多选框两种123456789101112onSelectChange = (selectedRowkeys, selectedRows) =&gt; &#123; this.setState(&#123; selectedRowkeys, selectedItem: selectedRows[0] //注意：这里本人走了很长时间的坑，按照我的理解是：selectedRows 会有好多条数据，只能是第一条，数据才能被后续代入 &#125;)&#125;const rowSelection = &#123; type: 'radio', //单选框，可选择多选框 selectedRowKeys, onChange: this.onSelectChange&#125;&lt;Table rowSelection=&#123;rowSelection&#125; xxx /&gt; 点睛之笔1234567891011121314151617handleOperator = type =&gt; &#123; const &#123; selectedItem, selectedRowKeys &#125; = this.state let item = this.state.selectedItem console.log(selectedItem) console.log(selectedRowKeys) ···· ···· ···· else if (type == 'edit' || type == 'detail') &#123; this.setState(&#123; title: type == 'edit' ? '编辑用户' : '查看详情', isVisible: true, terinfo: item, type &#125;) 翻页这里主要是一个分页，向后端获取第 2..3..的数据注意点：这个 onChange 方法可以向 requirelist 一样变成一个通用的获取资源的方法，主要用在 edit/delete，因为删除或编辑的时候，需要仍然停留在该页，获取该页的数据 12345678910111213141516onChange = pageNumber =&gt; &#123; this.setState(&#123; pageNumber, loading: true &#125;) fetch(`http://198.13.50.147:8099/api/endpoint?page=$&#123;pageNumber&#125;`, &#123; ····· &#125; ·····&lt;Pagination className="pagination" defaultCurrent=&#123;1&#125; total=&#123;this.state.total&#125; onChange=&#123;this.onChange&#125;/&gt;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是前后端分离]]></title>
    <url>%2F2019%2F05%2F22%2Ffront-4-back%2F</url>
    <content type="text"><![CDATA[什么是前后端分离开始该项目前，我的理解其实是错的，我一开始搞不懂什么是ASP和JSP，我本来以为他们是相似的语言，因为能动态的获取服务器的信息，即动态网页，之前用laravel写的PHP，到最近才发现他们是一类的，接着恍然大悟。。。oo\ 整理一波 浏览器根本不关心服务器端是 JSP、ASP、PHP，或者还是原始的 Servlet，或是静态服务器上的 HTML，只要返回的是合法的 HTML 就可以。 把 JSP 中静态的 HTML 部分拿出来，变成简单的 HTML 文件，放在 HTTP 服务器上，浏览器只要获取到这些 HTML 就可以了。动态的数据部分用 HTML 里的 JS 通过 AJAX 的方式从服务器端获取，然后动态操作 Dom，完成动态内容的展示。 JSP 所在的服务器被称为 Consumer(消费者，也就是服务的使用者)，另一台提供数据的服务器被称为 Producer(生产者，也就是服务的提供者)。如果上面为 JSP 提供数据的服务又调用了第三个服务的接口获取数据，那么就又产生了新的 Consumer 和 Producer 关系。(据我现在的经验，React和Java也是这样的关系) 两种协作方式：服务器端渲染 &amp;&amp; 前后端分离。然后我看到了一个生动的例子(盒马生鲜貌似是我第一次对计算机有点感兴趣)，分享一哈—&gt; 盒马生鲜提供两种方式，一种是前后端分离，一种是服务器端渲染。 前后端分离是哪种方式呢？就是外卖或者是直接买生鲜，自己回家去做。 服务器端渲染是哪种方式呢？就是直接在盒马鲜生自己加工，直接吃，或者是带回家吃。 这里的生鲜就是数据。 做出来的食物就是 Html 网页。 看资料时的 QS 什么是首屏渲染 —&gt;为了安全，我们使用了 httpOnly，这样前端无法读取 cookie 信息， 完全靠服务器判断。那么我们怎么知道第一次是渲染登录界面还是进入主界面呢？这里使用了类似 jsonP 的实现原理。在网关里做了拦截， 当访问主界面时，如果发现用户没有登录， 就在返回的结果前面插入一个 script 标签，调用一段 js 代码，使主界面隐藏并显示登录页面。 jsonP 实现跨域访问的方法也是类似这样的。—&gt;这个jsonP我知道是axios里的东西，我现在也有一个这样的问题，我退出登录时，把本地的 localstorage 的东西删掉了，但是我还是到达了 home 页面。—&gt;首先，react在第一次访问过之后，可能它本地的一些静态的资源已经存储了，加上 home 页面暂时没有动态渲染，即静态页面—&gt;受该信息的启发，然并卵，我还是不知道怎么办—&gt;再受启发，比如某些路由或者说当你的权限不同时，导航栏上的某些内容是不同的，有些路由，你是没有权限到达的。。。。。。 烦好烦、气/权限有你这么造的吗！！!]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react_install]]></title>
    <url>%2F2019%2F05%2F22%2Finstall%26%26tools%2F</url>
    <content type="text"><![CDATA[create-react-app前言React+antd的组件库 安装ps:可以使用npm,但是yarn更快、更安全 yarn create react-app myproject 初始化脚手架和 React 项目依赖 cd myproject yarn start 浏览器访问http://localhost:3000 12345678910111213141516171819202122232425#项目结构：├── package.json├── public| ├── favicon.ico| ├── index.html| └── manifest.json├── README.md├── src| ├── App.css| ├── App.js| ├── App.test.js| ├── index.css| ├── index.js| ├── logo.svg| └── serviceWorker.js└── yarn.lock#引入antdyarn add antd#修改`src/App/.css`,在文件顶部引入`antd/dist/antd.css`@import &apos;~antd/dist/antd.css&apos;; 文件说明 manifest.json对网页做一些配置：如果你打开过某个网页，它会自动有个桌面快捷键，用什么 LOGO，什么内容 serviceWorker.js配置好 manifest.json, 使用 registerServiceWorker.js，用户完全可以把你的网页快捷方式放到桌面上，因为你的网页此时支持离线访问，所以用起来和原生 app 的体验很接近。注意只有运行npm run build,这个文件才有用 sassnpm install node-sass 高级配置react-app-rewired 对create-react-app的默认配置进行重定义 yarn add react-app-rewired customize-cra --dev /* package.json */ &quot;scripts&quot;: { - &quot;start&quot;: &quot;react-scripts start&quot;, + &quot;start&quot;: &quot;react-app-rewired start&quot;, - &quot;build&quot;: &quot;react-scripts build&quot;, + &quot;build&quot;: &quot;react-app-rewired build&quot;, - &quot;test&quot;: &quot;react-scripts test&quot;, + &quot;test&quot;: &quot;react-app-rewired test&quot;, } 在项目的根目录创建一个config-overrides.js用于修改默认配置 babel-plugin-import babel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件 yarn add babel-plugin-import --dev /*config-overrides.js*/ + const { override, fixBabelImports } = require (&apos;customize-cra&apos;); + module.exports = override( + fixBabelImports(&apos;import&apos;, { + libraryName: &apos;antd&apos;, + libraryDirectory: &apos;es&apos;, + style: &apos;css&apos;, + }), + ); 然后移除前面在 src/App.css 里全量添加的 @import ‘~antd/dist/antd.css’;按下面格式引入模块 import { Button } from &apos;antd&apos;; 注意：package.json 里的内容要清楚，可以把配置或者工具链划分在devdependences中 工具链 .editorconfig prettier husky + lint-staged + commitlint Redux 初了解奉上链接：为啥会有 redux]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[调侃]]></title>
    <url>%2F2019%2F05%2F22%2Fodds%2F</url>
    <content type="text"><![CDATA[闲事_01我的页面中也就一个表单提交，说我自己的页面中的是简单、垃圾，我貌似没有反驳，我也是这样想的，但是我貌似在这个增删改查上面花了好长时间。。。。。。但其实我感觉我并没有熟练掌握写这个东西。。。。。。所以我今天想写一篇关于表单的笔记。。。💩]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react_fetch]]></title>
    <url>%2F2019%2F05%2F22%2Ffetch%2F</url>
    <content type="text"><![CDATA[fetch 获取该页面的数据—&gt;requireList 如何写fetch 12345678910111213141516171819202122232425262728this.setState(&#123; loading: true &#125;)fetch('http://localhost:8099', &#123; method: 'GOT', headers: &#123; 'Content-Type': 'application/json' &#125;, body: JOSN.Stringfy(&#123; ...data &#125;)&#125;) .then(res =&gt; json()) .then(res =&gt; &#123; const &#123; msg &#125; = res if (msg === 'success') &#123; console.log(msg) message.success('登录成功！') &#125; else &#123; console.log(msg) message.error('登录失败！') &#125; &#125;) .catch(err =&gt; &#123; console.log(err) message.error('网络请求异常！') &#125;) .finally(() =&gt; &#123; this.setState(&#123; loading: fales &#125;) &#125;) 教你解决一个坑 后端是不是把一些少量的信息放在 headers 里传了？-哟 你是不是获取不到？-哟 你是不是还打印过 res,空的，这么拿得到 header 呢？-哟哟哟哈哈哈哈，恭喜你，踩到狗屎运了，俺来教你那啥，可能是跨域问题，打印的 res 会显示cros 12345678.......then(res=&gt;json()).then(res=&gt;&#123; const token = res.headers.get('token') console.log(token) //那啥，我警告你不要去打印res,之后你啥也拿不到，可能是后端的安全的问题。。&#125;)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Website]]></title>
    <url>%2F2019%2F02%2F21%2Fwebsite%2F</url>
    <content type="text"><![CDATA[前言首先它是一个网站，不是一个网页。我仔细思考过网站这个东西，而且尽量往它身上靠，但我觉得我欠缺的东西很多很多，让我不知道怎么去实现某一些细节，一些让用户体验感很好的细节，让用户觉得这个网站不是很死的细节。我先来说一下我觉得好的网站是怎样的。 视觉 简 一个网站它是用来干嘛的，就要充分服务好这个主题，给用户提供最直接、最快的服务 动 一个网站往下翻东西的时候，你能感受到它是等你快翻到那里的时候跳出来的；还有就是一些很小很小，不会妨碍主题的小动画，当鼠标悬停在某个小图标上时，它会细微地动一下。（ps：我不知道第一个算不算动画） 布局（部分） 1、一个网站可以划分为几个部分，导航栏（顶部、侧边栏），一个小小的导航栏，别小瞧，我 just can’t。比如鼠标悬停，下拉框直接下来了，下拉之后再悬停又一个大内容扩展出来。还有点击某个导航栏的选项后有一个小尖尖，我我我，，，2、看过一些商业型的页面，他们需要宣传他们新的产品，那就需要一个宣传新产品的一部分内容；产品会有不同的类，通常把这些类先集中一下，然后链接到具体产品，但是分类有会有很多种，宣传页面的形式不能雷同；又或者 有一些活动宣传。。这样内容就有很多个部分，每个部分都会是一个电脑大小的页面，你要充分掌握好这个电脑大小的内容，给用户一个不会“断“的感觉，并且内容适中 前后端交互怎么说呢，就我吧，感觉没有后端的东西，那个网页就是死的。虽说“一个静态页面的请求+返回一个静态页面”这也算是前后端交互，但是前后端交互把，我会把它放到一个很高的水平上，网页一下子就有生命了。比如注册，（手机、email、qq、微信、短信、扫描二维码登录），这些功能让我觉得自己无从下手，因为这些功能真的能体现这个网站的生命啊！还有验证、提交信息等、、、自己很菜。还有最近我去弄了一下 blog，稍微仔细地看了一下 next 这个主题，很厉害啊。。。人家的渲染，我差不多知道一些，模板提取啊，数据库的东西展示到页面啊，我不知道它用的什么语言，但就是 HTML 感觉要被后端的语言快覆盖掉了，当然 css、js 是不会怎么变的，但我肯定不是一个水平的。 域名、服务器前面都是一个 web 网站的程序，再来说说一个完整的网站。首先得有个域名，域名注册这边就不详述了，给个图文教程吧。接着是服务器（ps:这边我还没有手动自己弄过），注册个服务器，把程序导入，域名到服务器因为也没弄过也不大清楚 nodejs 搭建服务器 + express 框架不得不说，我感觉好难啊，因为我会觉得看不懂啊，它虽然会跟你讲这一部分是干了件什么事，但是我得一句句看懂吧，教程没有做到这一点啊，让我觉得自己还是 js 不会写，js。js。js。唉这个寒假没有，，我要快点补了。express 里我用了个 ejs 的模板引擎，然后就有一点 MVC 的影子了。不过要做到表单提交这些功能，自己还要进化啊啊！ 网页碰到的问题 + 解决方法一个网页可以分为几个部分，几个功能 导航栏 问题：一开始学的时候，会觉得“我靠，一个导航栏，怎么有这么多 class”，一开始肯定也会不清楚这些 class 是干什么的：其实就是 bootstrap 帮你写好的 css（bootstrap 是一个 css 框架）这里可以利用好 IDE，ctrl+左鼠标键，查看该 css &gt;&gt;&gt; 解决方法：看模板，然后多看看，发现就是那几句话，然后我知道这是个导航栏固定的套路 页面内容前面我也说了，一个好的页面会有页面内容的划分，这怎么做到呢？笼统地说就是给一个内容下面加一个背景。 问题：再回到前面，我是不是说过这个页面的大小要差不多是你电脑大小，这样背景的高度是不是就要和你电脑高度差不多，但是你也要顾及到你的内容啊，总要把相关内容包括进来。 &gt;&gt;&gt; 解决方法：1.固定高度 2.内容到哪，高度到哪 移动端适配主角肯定是 bootstra 的栅格系统了 问题：肯定会走过以下坑：1.内容重叠 2.内容冒出去 3.有些东西在小屏幕不好弄，也没啥用 &gt;&gt;&gt; 解决方法：1./2. 12 个算一下，或者直接一个个试 ；第二个问题还有一点坑，就是明明只有 12 个以内，怎么和导航栏一起冒出去了呢？这边是因为没有仔细看文档“row”，这个 row 也有点坑，不过有些页面可能看不出，就是这个 row 有个 padding，好像是不对称的，手机端会有一点点问题 3.隐藏，既然手机端用不到，那就隐藏起来 页面找错Chrome 的 F12工具，移动端适配啊，找错啊，特别是在 padding 啊，margin 啊，栅格啊什么的，很有用 性能优化分为开发和建立两个阶段。开发的时候不用去压缩，需要同步更新，就是不用一直 f5。建立的时候去压缩。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>website</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[System]]></title>
    <url>%2F2018%2F12%2F10%2Ftrample%2F</url>
    <content type="text"><![CDATA[git bash 是不能用apt-get这个命令的，于是我就走了如下多的坑，还好有点收获 安装git，同时会安装git bash，Git Bash是Windows下的命令行工具。基于msys GNU 环境，有git分布式版本控制工具，主要用于git。但是除了使用git命令以外，还可以使用linux命令。（当然也有一些命令不能使用，比如apt-get等） 知道上面的一些东西后，又查到说 Win10提供的WSL相当于一个Linux“模拟器”（原理不完全一致），可以直接运行Linux二进制文件然后心里知道win10好像和linux之间有点东西，接着查到Win10 有个特殊的功能，就是可以使用 Ubuntu 的 bash，只需要开启这个有趣的功能，就可以将 Win10 当 Ubuntu 使用，从而像 Linux 那样只输入相关命令即可显示树形结构文件目录。 其实就是打开 bash 后，提示你是否下载安装 Ubuntu on Windows，（ubuntu就是基于linux的）那就等于装了个linux系统，没意思了。中途我还试了个东西Windows下Git Bash自带的MinGW以及MinTTY使用说明git bash就是mingw，使用ssh链接linux服务器，我这里真的是太蠢了，不清楚ssh到底该怎么用，其实它是用来连别人的linux机器的。然后跟这个东西说再见吧。 所有参考文件： Windows中使用git bash执行Linux命令 Win10开启Ubuntu Windows下Git Bash自带的MinGW以及MinTTY使用说明]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Windows/Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css还没看完，sass直接学行不？哈哈哈]]></title>
    <url>%2F2018%2F12%2F07%2FRuby%2Bsass%2F</url>
    <content type="text"><![CDATA[安装Ruby、Sass、Compass 安装后，ruby -v检查一下（说是要换gem源，但我失败了，然后还是https://rubygems.org/） Ruby自带一个叫做RubyGems的系统，用来安装基于Ruby的软件。用这个系统来安装Sass、Compass（与node，npm很像了，而且也有一个命令行）Sass是什么 css扩展语言sass与scss 用法有一点不一样，scss更好用（所以我看了scss，嘿嘿） sass与lessSass与Less都可以视为一种基于CSS之上的高级语言，其目的是使得CSS开发更灵活和更强大，Sass的功能比Less强。他们俩当然有区别：sass/scss与less的区别 Learn Scss变量12345678$primary-color:#1269b5;div.box&#123; background-color:$primary-color;&#125;h1.page-header&#123; border:1px solid $primary-color&#125; 变量里还可以引用其他变量 当变量定义在css规则块内，那么该变量只能在此规则块内使用。嵌套/嵌套调用一个父选择器1234567891011121314151617181920212223.nav&#123; height:100px; ul&#123; margin:0; li&#123; float:left; list-style:none; padding:5px; &#125; a&#123; display:block; color:#000; padding:5px; &amp;:hover&#123; background-color:#0d2f74; color:#fff; &#125; &#125; &#125; &amp; &amp;-text&#123; font-size:15px; &#125;&#125; 嵌套属性12345678910111213body&#123; font:&#123; family:Arial; size:15px; weight:normal; &#125;&#125;.nav&#123; border:1px solid #000&#123; left:0; right:0; &#125;&#125; Mixins 有名字的定义好的样式,还可以加参数,还可以嵌套12345678910@mixin alert&#123; color:#8a6d3b; background-color:#fcf8e3; a&#123; color:#664c2b; &#125;&#125;.alert-warning&#123; @include alert;&#125; 12345678910@mixin alert($text-color,$background)&#123; color:$text-color; background-color:$background; a&#123; color:darken($text-color,10%); &#125;&#125;.alert-warning&#123; @include alert(#8a6d3b,#fcf8e3);&#125; 继承、扩展(群组选择器)(继承所有相关的)12345678910.alert&#123; padding:15px;&#125;.alert a&#123; font-weight:bold;&#125;.alert-info&#123; @extend .alert; background-color:#d9edf7;&#125; 原生的css导入 sass兼容原生的css，可用css@import导入，这样浏览器就要去解析和下载。变慢。 也可用使用@import，就是先把css改成.scss后缀，即不能直接导入一个原生css文件。下列三种情况下会生成原生的CSS@import，变慢 被导入文件的名字以.css结尾； 被导入文件的名字是一个URL地址（比如http://www.sass.hk/css/css.css） 被导入文件的名字是CSS的url()值。Partials嵌套导入 在一个css文件里我们可以把其他的css文件包含进来，不过每次使用@import，浏览器都会发出一次新的http的请求，去下载被导入的http文件，会消耗服务器资源，变慢。 在一个scss文件中把其他scss文件包含进来，把他们编译成一个css文件，partials(有下划线)，不会单独编译成css1234@import "base";.alert&#123; padding:15px;&#125; 注释 多行注释，会在css文件中保留。在压缩的css里边会去掉。 1234/**美滋滋*爽歪歪*/ 单行注释,不会出现在css中 1//嘿嘿嘿 强制注释 123/*!*啦啦啦*/ 子组合选择器和同层组合选择器123456789article &#123; ~ article &#123; border-top: 1px dashed #ccc &#125;//同层全体组合选择器~，选择所有跟在article后的同层article元素。 &gt; section &#123; background: #eee &#125;//选择article下紧跟着的子元素中命中section选择器的元素。 dl &gt; &#123; dt &#123; color: #333 &#125; dd &#123; color: #555 &#125; &#125; nav + &amp; &#123; margin-top: 0 &#125;//同层相邻组合选择器+选择nav元素后紧跟的article元素。&#125; 默认变量值 反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值。@if/@else if/@else@for@each@while问题 用css@import导入，这样浏览器就要去解析和下载。 用@import把没有下划线的导入进来，(没有下划线的还会编译成css)，也要发出http请求，下载？ 用@import把有下划线的导入进来，(不会单独编译，会编译成一个css)，要消耗浏览器资源，变慢吗？]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Ruby&amp;sass/scss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node.js和npm有点迷]]></title>
    <url>%2F2018%2F12%2F05%2Fnodejs%2Bnpm%2F</url>
    <content type="text"><![CDATA[Node.jsNode 是一个服务器端JavaScript 解释器，它将改变服务器应该如何工作的概念。它的目标是帮助程序员构建高度可伸缩的应用程序，编写能够处理数万条同时连接到一个（只有一个）物理机的连接代码。Node.js 是一个让 JavaScript 运行在浏览器之外的平台。它实现了诸如文件系统、模块、包、操作系统 API、网络通信等 Core JavaScript 没有或者不完善的功能。 安装Node.js安装完后通过命令行工具node -v安装node.js过程会自动安装npm（node packages manager）npm -v Node.js 能做什么  具有复杂逻辑的网站；  基于社交网络的大规模 Web 应用；  Web Socket 服务器；  TCP/UDP 套接字应用程序； * 命令行工具；  交互式终端程序；  带有图形用户界面的本地应用程序；  单元测试工具； * 客户端 JavaScript 编译器。Node.js 内建了 HTTP 服务器支持，也就是说你可以轻而易举地实现一个网站和服务器的组合。这个服务器不仅可以用来调试代码，而且它本身就可以部署到产品环境，它的性能足以满足要求。 唉，小王同志只用了其中两种功能啊，而且还不熟，要加把劲，啥时候都学会呢？ Node+JavaScript 因为在当年，Node.js的作者Ryan Dahl是一名资深的C/C++程序员，在创造出Node之前，他的主要工作都是围绕高性能Web服务器进行的。经历过一些尝试和失败之后，他找到了设计高性能，Web服务器的几个要点：事件驱动、非阻塞I/O。所以Ryan Dahl最初的目标是写一个基于事件驱动、非阻塞I/O的Web服务器，以达到更高的性能，提供Apache等服务器之外的选择。他提到，大多数人不设计一种更简单和更有效率的程序的主要原因是他们用到了阻塞I/O的库。写作Node的时候，Ryan Dahl曾经评估过C、Lua、Haskell、Ruby等语言作为备选实现，结论为：C的开发门槛高，可以预见不会有太多的开发者能将它用于日常的业务开发，所以舍弃它；Ryan Dahl觉得自己还不足够玩转Haskell，所以舍弃它；Lua自身已经含有很多阻塞I/O库，为其构建非阻塞I/O库也不能改变人们继续使用阻塞I/O库的习惯，所以也舍弃它；而Ruby的虚拟机由于性能不好而落选。相比之下，JavaScript比C的开发门槛要低，比Lua的历史包袱要少。尽管服务器端JavaScript存在已经很多年了，但是后端部分一直没有市场，可以说历史包袱为零，为其导入非阻塞I/O库没有额外阻力。另外，JavaScript在浏览器中有广泛的事件驱动方面的应用，暗合Ryan Dahl喜好基于事件驱动的需求。当时，第二次浏览器大战也渐渐分出高下，Chrome浏览器的JavaScript引擎V8摘得性能第一的桂冠，而且其基于新BSD许可证发布，自然受到Ryan Dahl的欢迎。考虑到高性能、符合事件驱动、没有历史包袱这３个主要原因，JavaScript成为了Node的实现语言。 作者：马小秋参考链接为什么要把 JavaScript 放到服务器端上运行？ 问题 Node.js 内建了 HTTP 服务器支持，emmmm这个服务器用于建网站时的服务器？如果我的IP地址固定，我弄个网站，说是Windows里有一个服务器？]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>node.js+npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp learning]]></title>
    <url>%2F2018%2F12%2F01%2Fgulp%2F</url>
    <content type="text"><![CDATA[前端开发除了HTML+CSS+Javascript,需要提高效率，减少重复工作自动化工具 我用到的5个基本的task、watch、src、dest、run 插件gulpgulp-minifycssgulp-uglifygulp-renamegulp-imagemin(本来还有一个cache，所说可以只压缩新的，但貌似是要缓存的所以我就没用)gulp-concatgulp-notifygulp-htmlmingulp-livereload(和reload有点混，reload在同步更新里用到)delgulp-connect(还没有成功) 问题function(cb)cb是什么东西，貌似好像是说明那件事情做好了，如果有些特定的返回值才会执行下一个任务异步的callback、promise、stream 有一些凌乱，为什么task里又有varconnect写的貌似不对，同步不了 gulpfile.jsjs压缩、合并、重命名12345678910// Scriptsgulp.task('scripts', function() &#123; return gulp.src('./public/src/scripts/**/*.js') .pipe(concat('main.js')) .pipe(gulp.dest('dist/assets/js')) .pipe(rename(&#123;suffix: '.min'&#125;)) .pipe(uglify()) .pipe(gulp.dest('dist/assets/js')) .pipe(notify(&#123; message: 'Scripts task complete' &#125;));&#125;); css压缩1234567// Stylesgulp.task('styles', function() &#123; return gulp.src('./public/src/styles/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('dist/styles')) .pipe(notify(&#123; message: 'Styles task complete' &#125;));&#125;); 图片压缩1234567// Imagesgulp.task('images', function() &#123; return gulp.src('./public/src/images/**/*') .pipe(imagemin(&#123; optimizationLevel: 3, progressive: true, interlaced: true &#125;)) .pipe(gulp.dest('dist/images')) .pipe(notify(&#123; message: 'Images task complete' &#125;));&#125;); 清理和默认任务（这里有一个异步）12345678// Cleangulp.task('clean', function(cb) &#123; del(['dist/assets/css', 'dist/assets/js', 'dist/assets/img'], cb)//返回了一个cb&#125;);// Default taskgulp.task('default', ['clean'], function() &#123; gulp.start('styles', 'scripts', 'images')//使用回调函数告诉gulp任务完成&#125;); 参考链接：Gulp 中异步任务的处理 html压缩12345678910111213141516// Htmlgulp.task('html',function()&#123; return gulp.src('./public/hello.html') .pipe(htmlmin(&#123; removeComments: true,//清除HTML注释 collapseWhitespace: true,//压缩HTML collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true,//删除&lt;script&gt;的type="text/javascript" removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type="text/css" minifyJS: true,//压缩页面JS minifyCSS: true,//压缩页面CSS &#125;)) .pipe(gulp.dest('dist/html')) .pipe(notify(&#123; message: 'Html task complete'&#125;));&#125;); 通过watch 看修改的文件 自动执行相关命令用到了livereload和change12345678910111213// Watchgulp.task('watch', function() &#123; // Watch .scss files gulp.watch('src/styles/**/*.scss', ['styles']); // Watch .js files gulp.watch('src/scripts/**/*.js', ['scripts']); // Watch image files gulp.watch('src/images/**/*', ['images']); // Create LiveReload server livereload.listen(); // Watch any files in dist/, reload on change gulp.watch(['dist/**']).on('change', livereload.changed);&#125;); 用reload 同步更新不用f5首先通过connect创建一个服务器，默认端口号8080，然后watch，最后reload123456789101112//connectgulp.task('serve',function()&#123; connect.server(&#123; root: 'public', livereload: true &#125;); gulp.watch('./public/**/*.*',['reload']);&#125;);gulp.task('reload',function()&#123; gulp.src('./public/*.html') .pipe(connect.reload());&#125;);]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[three topics]]></title>
    <url>%2F2018%2F11%2F01%2Fthree-topics%2F</url>
    <content type="text"><![CDATA[度娘Super Fast&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首页包大小gzip后只有11.1k左右。耗时也就是500多毫秒&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首页是没有js和css外链的，不然会再发起多次请求。其他的首屏所需要的js与css，全部在上线前，编译时，编译内联至HTML中 1.缓存（cookie，服务端传读local还是读写local） 2.外链合并&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个文件以自己文件内容生成的版本号为戳，标识自己的唯一性。每次服务端返回页面时，会把当前在服务器上的所有静态文件版本号，返给前端&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前端首屏加载完成后，会用这些版本号与local中进行一一对比，发现不一致的js/css，会一起发送一个合并请求。这样可以保证每个文件的缓存与版本迭代。同时，也避免了过多的外链。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模板和数据，也会被缓存至localstorage中 3.使用iconfont&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多业务是不需要多彩色图的，这些icon就可以使用iconfont。 4.卡片的异步加载与缓存&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们首屏也就需要2张卡片，也将卡片内容(html/css/js)存储到了local中。异步拉取卡片的时候，如果卡片内容没有变。服务端就不要返回了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不在首屏的就要异步化！：触发时才会进行加载，采用按需加载。 5.少量静态文件的域名&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的logo与iconfont均是放在m.baidu.com域下的，这样节省了DNS的解析 6.极小的图片base64化（对于小于1k的图片） PC到移动，渲染:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器就按照了980宽的方式，渲染出来页面图像。苹果再把这张图像，缩放一下，缩为屏幕大小。在手机上观察**的电脑版&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图像是基于像素点的描述，放大后，之前图像的一个像素，被放大为多个像素。自然是会失真的&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以更改的布局宽度：浏览器的渲染依据，layout viewport（ 屏幕有多宽，浏览器就照着多宽去去渲染） 逻辑分辨率：就是照着宽度去写代码 物理分辨率：单位屏幕上的像素点变多了，貌似就更清晰了1.iphone3 iphone4 屏幕不变，像素密度变大 然后骗浏览器，为的是让布局不变，也就是让图片大小不变，然后iphone4里的图片大小和3里的一样，但是那张图片里的像素翻倍了2.到了iphone6,屏幕变大了，然后就上调了逻辑分辨率（375/320），就是放大了页面和图片，然后物理分辨率（750/640）也上去了，但貌似清晰度没有变吧3.iPhone6 plus扩大清晰度，屏幕大小还是和6一样，然后屏幕上的像素点又多了，也就是物理分辨率上去了，图片更加清楚了，然后为了好算什么的就用了缩放和像素什么的让物理分辨率成了逻辑分辨率的三倍，然后除以3去写代码 iphone3 iphone4 屏幕不变 像素变大 然后骗浏览器，为的是让布局不变，也就是让图片大小不变，然后iphone4里的图片大小和3里的一样，但是那张图片里的像素翻倍了 iphone6 屏幕变大 上调了逻辑分辨率（375/320），然后物理分辨率（750/640）也上去了 就是放大了页面和图片，但貌似清晰度没有变吧 iPhone6 plus 屏幕不变 物理分辨率上去了 图片更加清楚了，然后为了好算什么的就用了缩放和像素什么的让物理分辨率成了逻辑分辨率的三倍，然后除以3去写代码 iconfont:1.怎么做 2.浏览器的兼容性 前端模板与渲染：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.页面级渲染：前端与后端的交互，浏览器端发出URL，后端返回一张拼好了的HTML串。（html中可能会混有一些php(或者php中混有一些html)。在服务端将数据与模板进行拼装，生成要返回浏览器端的html串。)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.异步的请求与新增模板：1）把数据拿到前端拼装成页面–貌似有模板、不变的+有更新的 2）在后端拼装直接把渲染生成的HTML传给前端，前端直接用未完待续hiahia笔记来源：https://segmentfault.com/a/1190000005882953欢迎吐槽、批评吐槽批评快来吧]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[asset an image]]></title>
    <url>%2F2018%2F10%2F27%2Fasset-an-image%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git笔记]]></title>
    <url>%2F2018%2F10%2F27%2Fgit%2F</url>
    <content type="text"><![CDATA[WORKFLOWWorking Directory&nbsp;&nbsp;&nbsp;&nbsp;Stage&nbsp;&nbsp;&nbsp;&nbsp;Master1.git add file2.git commit -m “ “3.git reset HEAD^（版本区）4.gut checkout – file（丢弃工作区的修改/其实是用版本库里的版本替换工作区的版本）5.rm（工作区）6.git rm （版本区） git rm –cached readme.txt(从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。)7.git diff HEAD （工作区、版本区 比较）8.git log9.git reflog10.git statusmaster&nbsp;&nbsp;&nbsp;&nbsp;branch1.git checkout -b dev（创建切换）/git branch dev（创建）2.git branch（查看）3.git checkout master/git checkout dev（切换）4.git merge dev（合并）5.git branch -d dev（删除）local&nbsp;&nbsp;&nbsp;&nbsp;remote1.git remote add origin ___2.git push -u origin master/git push origin master3.git remote remove origin4.删掉的文件同步到githubgit add -A它能stages所有文件，而之前用的git add .只能stages新文件和被修改文件，没有被删除文件RemoteA&nbsp;&nbsp;&nbsp;&nbsp;RemoteB1.fork2.PR调解冲突1)deva 先merge masterdevb 后×step1 手动改 step2 add commit2)deva 先merge master1 先push Remotedevb 后merge master2 后push×step1 B pull Remote step2 push 多人协作你从远程仓库克隆时，Git自动把本地的master和远程的master分支对应查看远程仓库的信息git remote/git remote -v（显示抓取（fetch）和推送(push)的地址）git fetch origin master (From) git merge origin/master(更新到最新版本)/git pull(也行) 如果你只是想看看本地分支和远程分支的差异，你可以使用下面的命令：git diff master origin/mastergit push origin mastergit push origin dev小伙伴在另一台电脑克隆（他把钥匙添加到github了，就有权限push了）他只看得到你的项目的master分支，他要在dev分支上开发 git checkout -b devgit add env.txtgit commit -m “add env”git push origin dev冲突：没有指定本地dev分支与远程origin/dev分支的链接git branch –set-upstream-to=origin/dev devgit pull手动改了以后，git commit，git push origin dev 覆盖有时候由于某些误操作（如错误的将其他分支 merge 过来），导致远程分支错误，需要强制覆盖远程分支。可以使用命令 git push origin branch-name –force 来强制覆盖。如果是团队开发，最好是使用 revert 命令来回滚 ，而不是覆盖。这样虽然历史记录不太干净，但是比较安全。回滚一个 merge 的命令如下:git revert merge-commit-hash -m git merge –no-ff -m “merge with no-ff” dev(通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息;–no-ff表示禁用Fast forward,用普通模式合并，合并后的历史有分支，能看出来曾经做过合并;-m参数，把commit描述写进去)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[URL]]></title>
    <url>%2F2018%2F10%2F27%2FURL%2F</url>
    <content type="text"><![CDATA[URL(Uniform Resource Location):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;统一资源定位器 网页地址的意思&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个网页都有只属于自己发URL地址（我们俗称网址）具有全球唯一性&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上网浏览网页，在鼠标点击之间连接到不同的URL的这个过程都显示在电脑的浏览器的地址栏里。CDN（Content Delivery Network):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容分发网络 依靠部署在各地的边缘服务器，通过中心平台的负载均衡，内容分发调度，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中度。代理、网关：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对URL从一个浏览器到外部服务器和返回结果，传递一个请求的系统。应用服务器：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过各种协议把商业逻辑到客户端的程序对TCP/UDP：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传输层协议 请求TLS:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安全传输层协议LVS（Linux 虚拟服务器）给后端ECS集群对HTTP:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;超文本传输协议给Tengine集群 再给后端ECS集群DNS：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整个系统架构分为流量层、应用层、数据层，利用 DNS 技术实现 GSLB（Global Server Load Balance，全局负载均衡），实现用户就近访问。ISP（Internet Service Provider，互联网服务提供商):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本地 DNS 地址DHCP（Dynamic Host Configuration Protocol):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态主机配置协议HTTP请求：在上一步我们通过 DNS 解析拿到服务器 IP 地址后，浏览器再通过系统调用 Socket 接口与服务器 443 端口进行通信，整个过程可以分解为建立连接、发送 HTTP 请求、返回 HTTP 响应、维持连接、释放连接五个部分socket：网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。建立网络通信连接至少要一对端口号。浏览器解析过程：现代浏览器是一个及其庞大的大型软件，在某种程度上甚至不亚于一个操作系统，它由多媒体支持、图形显示、GPU 渲染、进程管理、内存管理、沙箱机制、存储系统、网络管理等大大小小数百个组件组成.一个 Browser 进程多个 Renderer 进程一个 GPU 进程多个 NPAPI Render 进程多个 Pepper Plugin 进程而每个进程包括若干个线程：一个主线程在 Browser 进程中：渲染更新界面在Renderer 进程中：使用持有的内核 Blink 实例解析渲染更新界面一个 IO 线程在 Browser 进程中：处理 IPC 通信和网络请求在 Renderer 进程中：处理与 Browser 进程之间的 IPC 通信一组专用线程一个通用线程池主流程：页面的解析工作是在 Renderer 进程中进行的，Renderer 进程通过在主线程中持有的 Blink 实例边接收边解析 HTML 内容。渲染流程：DOM 树、RenderObject 树（也叫 Render 树）、 RenderLayer 树，1.同一个坐标系（比如 canvas、absolute）时 ，合并（由CPU）RenderLayer， GraphicsLayer 树 2.当 RenderLayer 满足合成层条件（比如 transform，熟知的硬件加速）时，会有自己的 GraphicsLayer。每个 GraphicsLayer 都有一个 GraphicsContext 对象，负责将层绘制成位图作为纹理上传给 GPU，由 GPU 负责合成多个纹理，最终显示在屏幕上。笔记来源：https://zhuanlan.zhihu.com/p/43369093和百度百科]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
