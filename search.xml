<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>System</title>
      <link href="/2018/12/10/trample/"/>
      <url>/2018/12/10/trample/</url>
      
        <content type="html"><![CDATA[<ul><li>git bash 是不能用apt-get这个命令的，于是我就走了如下多的坑，还好有点收获<blockquote><blockquote><p>安装git，同时会安装git bash，Git Bash是Windows下的命令行工具。<strong>基于msys GNU 环境</strong>，有git分布式版本控制工具，主要用于git。但是除了使用git命令以外，还可以使用linux命令。（当然也有一些命令不能使用，比如apt-get等）</p></blockquote></blockquote></li></ul><ul><li>知道上面的一些东西后，又查到说<blockquote><blockquote><p>Win10提供的WSL相当于一个Linux“模拟器”（原理不完全一致），可以直接运行Linux二进制文件<br>然后心里知道win10好像和linux之间有点东西，接着查到<br>Win10 有个特殊的功能，就是可以使用 Ubuntu 的 bash，只需要开启这个有趣的功能，就可以将 Win10 当 Ubuntu 使用，从而像 Linux 那样只输入相关命令即可显示树形结构文件目录。</p></blockquote></blockquote></li><li>其实就是打开 bash 后，提示你是否下载安装 Ubuntu on Windows，（ubuntu就是基于linux的）那就等于装了个linux系统，没意思了。中途我还试了个东西<em>Windows下Git Bash自带的MinGW以及MinTTY使用说明</em>git bash就是mingw，使用ssh链接linux服务器，我这里真的是太蠢了，不清楚ssh到底该怎么用，其实它是用来连别人的linux机器的。然后跟这个东西说再见吧。</li></ul><p>所有参考文件：</p><ul><li><a href="https://www.cnblogs.com/acm-bingzi/p/gitBash.html" target="_blank" rel="noopener">Windows中使用git bash执行Linux命令</a></li><li><a href="https://cniter.github.io/posts/c3f26b1.html" target="_blank" rel="noopener">Win10开启Ubuntu</a></li><li><a href="https://blog.csdn.net/cleverlzc/article/details/50904673" target="_blank" rel="noopener">Windows下Git Bash自带的MinGW以及MinTTY使用说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows/Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css还没看完，sass直接学行不？哈哈哈</title>
      <link href="/2018/12/07/Ruby+sass/"/>
      <url>/2018/12/07/Ruby+sass/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Ruby、Sass、Compass"><a href="#安装Ruby、Sass、Compass" class="headerlink" title="安装Ruby、Sass、Compass"></a>安装Ruby、Sass、Compass</h1><ul><li>安装后，ruby -v检查一下（说是要换gem源，但我失败了，然后还是<a href="https://rubygems.org/）" target="_blank" rel="noopener">https://rubygems.org/）</a></li><li>Ruby自带一个叫做RubyGems的系统，用来安装基于Ruby的软件。用这个系统来安装Sass、Compass（与node，npm很像了，而且也有一个命令行）<h1 id="Sass是什么"><a href="#Sass是什么" class="headerlink" title="Sass是什么"></a>Sass是什么</h1></li><li>css扩展语言<h3 id="sass与scss"><a href="#sass与scss" class="headerlink" title="sass与scss"></a>sass与scss</h3></li><li><p>用法有一点不一样，scss更好用（所以我看了scss，嘿嘿）</p><h3 id="sass与less"><a href="#sass与less" class="headerlink" title="sass与less"></a>sass与less</h3><p>Sass与Less都可以视为一种基于CSS之上的高级语言，其目的是使得CSS开发更灵活和更强大，Sass的功能比Less强。<br>他们俩当然有区别：<a href="https://www.cnblogs.com/wangpenghui522/p/5467560.html" target="_blank" rel="noopener">sass/scss与less的区别</a></p><h1 id="Learn-Scss"><a href="#Learn-Scss" class="headerlink" title="Learn Scss"></a>Learn Scss</h1><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>:<span class="number">#1269b5</span>;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.page-header</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="variable">$primary-color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量里还可以引用其他变量</p></li><li>当变量定义在css规则块内，那么该变量只能在此规则块内使用。<h3 id="嵌套-嵌套调用一个父选择器"><a href="#嵌套-嵌套调用一个父选择器" class="headerlink" title="嵌套/嵌套调用一个父选择器"></a>嵌套/嵌套<strong>调用</strong>一个父选择器</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line">      <span class="attribute">float</span>:left;</span><br><span class="line">      <span class="attribute">list-style</span>:none;</span><br><span class="line">      <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">a</span>&#123;</span><br><span class="line">      <span class="attribute">display</span>:block;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#000</span>;</span><br><span class="line">      <span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line">      &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:<span class="number">#0d2f74</span>;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp; &amp;-text&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font</span>:&#123;</span><br><span class="line">    family:Arial;</span><br><span class="line">    size:<span class="number">15px</span>;</span><br><span class="line">    weight:normal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>&#123;</span><br><span class="line">    left:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mixins-有名字的定义好的样式-还可以加参数-还可以嵌套"><a href="#Mixins-有名字的定义好的样式-还可以加参数-还可以嵌套" class="headerlink" title="Mixins 有名字的定义好的样式,还可以加参数,还可以嵌套"></a>Mixins 有名字的定义好的样式,还可以加参数,还可以嵌套</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> alert&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#8a6d3b</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#fcf8e3</span>;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#664c2b</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-warning</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> alert;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> alert(<span class="variable">$text-color</span>,<span class="variable">$background</span>)&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$text-color</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">$background</span>;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:darken(<span class="variable">$text-color</span>,<span class="number">10%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-warning</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> alert(<span class="number">#8a6d3b</span>,<span class="number">#fcf8e3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承、扩展-群组选择器-继承所有相关的"><a href="#继承、扩展-群组选择器-继承所有相关的" class="headerlink" title="继承、扩展(群组选择器)(继承所有相关的)"></a>继承、扩展(群组选择器)(继承所有相关的)</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.alert</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert-info</span>&#123;</span><br><span class="line">  @<span class="keyword">extend</span> .alert;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#d9edf7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原生的css导入"><a href="#原生的css导入" class="headerlink" title="原生的css导入"></a>原生的css导入</h3><ul><li>sass兼容原生的css，可用css@import导入，这样浏览器就要去解析和下载。变慢。</li><li>也可用使用@import，就是先把css改成.scss后缀，即不能直接导入一个原生css文件。下列三种情况下会生成原生的CSS@import，变慢<ul><li>被导入文件的名字以.css结尾；</li><li>被导入文件的名字是一个URL地址（比如<a href="http://www.sass.hk/css/css.css）" target="_blank" rel="noopener">http://www.sass.hk/css/css.css）</a></li><li>被导入文件的名字是CSS的url()值。<h3 id="Partials嵌套导入"><a href="#Partials嵌套导入" class="headerlink" title="Partials嵌套导入"></a>Partials嵌套导入</h3></li></ul></li><li>在一个css文件里我们可以把其他的css文件包含进来，不过每次使用@import，浏览器都会发出一次新的http的请求，去下载被导入的http文件，会消耗服务器资源，变慢。</li><li>在一个scss文件中把其他scss文件包含进来，把他们编译成一个css文件，partials(有下划线)，<strong>不会单独编译成css</strong><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"base"</span>;</span><br><span class="line"><span class="selector-class">.alert</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>多行注释，会在css文件中保留。在压缩的css里边会去掉。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*美滋滋</span></span><br><span class="line"><span class="comment">*爽歪歪</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>单行注释,不会出现在css中</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嘿嘿嘿</span></span><br></pre></td></tr></table></figure></li><li><p>强制注释</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">*啦啦啦</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="子组合选择器和同层组合选择器"><a href="#子组合选择器和同层组合选择器" class="headerlink" title="子组合选择器和同层组合选择器"></a>子组合选择器和同层组合选择器</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;//同层全体组合选择器~，选择所有跟在article后的同层article元素。</span><br><span class="line">  &gt; section &#123; background: <span class="number">#eee</span> &#125;//选择article下紧跟着的子元素中命中section选择器的元素。</span><br><span class="line">  dl &gt; &#123;</span><br><span class="line">    dt &#123; color: <span class="number">#333</span> &#125;</span><br><span class="line">    dd &#123; color: <span class="number">#555</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nav + &amp; &#123; margin-top: <span class="number">0</span> &#125;//同层相邻组合选择器+选择nav元素后紧跟的article元素。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认变量值"><a href="#默认变量值" class="headerlink" title="默认变量值"></a>默认变量值</h3><ul><li>反复声明一个变量，只有最后一处声明有效且它会覆盖前边的值。<h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="@if/@else if/@else"></a>@if/@else if/@else</h3><h3 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h3><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><h3 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h3><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1></li><li>用css@import导入，这样浏览器就要去解析和下载。</li><li>用@import把没有下划线的导入进来，(没有下划线的还会编译成css)，也要发出http请求，下载？</li><li>用@import把有下划线的导入进来，(不会单独编译，会编译成一个css)，要消耗浏览器资源，变慢吗？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ruby&amp;sass/scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js和npm有点迷</title>
      <link href="/2018/12/05/nodejs+npm/"/>
      <url>/2018/12/05/nodejs+npm/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>Node 是一个<strong>服务器端</strong>JavaScript 解释器，它将改变服务器应该如何工作的概念。它的目标是帮助程序员构建高度可伸缩的应用程序，编写能够处理数万条同时连接到一个（只有一个）物理机的连接代码。<br>Node.js 是一个让 JavaScript 运行在浏览器之外的平台。它实现了诸如文件系统、<strong>模块、包、操作系统 API</strong>、网络通信等 Core JavaScript 没有或者不完善的功能。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>安装完后通过命令行工具node -v<br><strong>安装node.js过程会自动安装npm（node packages manager）npm -v</strong></p><h2 id="Node-js-能做什么"><a href="#Node-js-能做什么" class="headerlink" title="Node.js 能做什么"></a>Node.js 能做什么</h2><p>  具有复杂逻辑的网站；</p><p>  基于社交网络的大规模 Web 应用；</p><p>  Web Socket 服务器；</p><p>  TCP/UDP 套接字应用程序；</p><p>* 命令行工具；</p><p>  交互式终端程序；</p><p>  带有图形用户界面的本地应用程序；</p><p>  单元测试工具；</p><p>* 客户端 JavaScript 编译器。<br>Node.js 内建了 HTTP 服务器支持，也就是说你可以轻而易举地实现一个网站和服务器的组合。这个服务器不仅可以用来调试代码，而且它本身就可以部署到产品环境，它的性能足以满足要求。</p><p>唉，小王同志只用了其中两种功能啊，而且还不熟，要加把劲，啥时候都学会呢？</p><h1 id="Node-JavaScript"><a href="#Node-JavaScript" class="headerlink" title="Node+JavaScript"></a>Node+JavaScript</h1><blockquote><p>因为在当年，Node.js的作者Ryan Dahl是一名资深的C/C++程序员，在创造出Node之前，他的主要工作都是围绕高性能Web服务器进行的。经历过一些尝试和失败之后，他找到了设计高性能，Web服务器的几个要点：事件驱动、非阻塞I/O。所以Ryan Dahl最初的目标是写一个基于事件驱动、非阻塞I/O的Web服务器，以达到更高的性能，提供Apache等服务器之外的选择。他提到，大多数人不设计一种更简单和更有效率的程序的主要原因是他们用到了阻塞I/O的库。写作Node的时候，Ryan Dahl曾经评估过C、Lua、Haskell、Ruby等语言作为备选实现，结论为：<br>C的开发门槛高，可以预见不会有太多的开发者能将它用于日常的业务开发，所以舍弃它；Ryan Dahl觉得自己还不足够玩转Haskell，所以舍弃它；<br>Lua自身已经含有很多阻塞I/O库，为其构建非阻塞I/O库也不能改变人们继续使用阻塞I/O库的习惯，所以也舍弃它；而Ruby的虚拟机由于性能不好而落选。相比之下，JavaScript比C的开发门槛要低，比Lua的历史包袱要少。尽管服务器端JavaScript存在已经很多年了，但是后端部分一直没有市场，可以说历史包袱为零，为其导入非阻塞I/O库没有额外阻力。另外，JavaScript在浏览器中有广泛的事件驱动方面的应用，暗合Ryan Dahl喜好基于事件驱动的需求。当时，第二次浏览器大战也渐渐分出高下，Chrome浏览器的JavaScript引擎V8摘得性能第一的桂冠，而且其基于新BSD许可证发布，自然受到Ryan Dahl的欢迎。考虑到高性能、符合事件驱动、没有历史包袱这３个主要原因，JavaScript成为了Node的实现语言。</p></blockquote><p>作者：马小秋<br>参考链接<a href="https://www.zhihu.com/question/270826658" target="_blank" rel="noopener">为什么要把 JavaScript 放到服务器端上运行？</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p> Node.js 内建了 HTTP 服务器支持，emmmm这个服务器用于建网站时的服务器？如果我的IP地址固定，我弄个网站，说是Windows里有一个服务器？</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js+npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gulp learning</title>
      <link href="/2018/12/01/gulp/"/>
      <url>/2018/12/01/gulp/</url>
      
        <content type="html"><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>除了HTML+CSS+Javascript,需要提高效率，减少重复工作<br>自动化工具</p><h1 id="我用到的5个基本的"><a href="#我用到的5个基本的" class="headerlink" title="我用到的5个基本的"></a>我用到的5个基本的</h1><p>task、watch、src、dest、run</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>gulp<br>gulp-minifycss<br>gulp-uglify<br>gulp-rename<br>gulp-imagemin(本来还有一个cache，所说可以只压缩新的，但貌似是要缓存的所以我就没用)<br>gulp-concat<br>gulp-notify<br>gulp-htmlmin<br>gulp-livereload(和reload有点混，reload在同步更新里用到)<br>del<br>gulp-connect(还没有成功)</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>function(cb)<br>cb是什么东西，貌似好像是说明那件事情做好了，如果有些特定的返回值才会执行下一个任务<br>异步的callback、promise、stream 有一些凌乱，为什么task里又有var<br>connect写的貌似不对，同步不了</p><h1 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h1><h3 id="js压缩、合并、重命名"><a href="#js压缩、合并、重命名" class="headerlink" title="js压缩、合并、重命名"></a>js压缩、合并、重命名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Scripts</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/src/scripts/**/*.js'</span>)</span><br><span class="line">    .pipe(concat(<span class="string">'main.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/js'</span>))</span><br><span class="line">    .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/assets/js'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Scripts task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="css压缩"><a href="#css压缩" class="headerlink" title="css压缩"></a>css压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Styles</span></span><br><span class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/src/styles/**/*.css'</span>)</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/styles'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Styles task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Images</span></span><br><span class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/src/images/**/*'</span>)</span><br><span class="line">    .pipe(imagemin(&#123; <span class="attr">optimizationLevel</span>: <span class="number">3</span>, <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Images task complete'</span> &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="清理和默认任务（这里有一个异步）"><a href="#清理和默认任务（这里有一个异步）" class="headerlink" title="清理和默认任务（这里有一个异步）"></a>清理和默认任务（这里有一个异步）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Clean</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    del([<span class="string">'dist/assets/css'</span>, <span class="string">'dist/assets/js'</span>, <span class="string">'dist/assets/img'</span>], cb)<span class="comment">//返回了一个cb</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Default task</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>, <span class="string">'images'</span>)<span class="comment">//使用回调函数告诉gulp任务完成</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/xyr05288/article/details/53114554&quot;" target="_blank" rel="noopener">Gulp 中异步任务的处理</a></p><h3 id="html压缩"><a href="#html压缩" class="headerlink" title="html压缩"></a>html压缩</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Html</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/hello.html'</span>)</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,<span class="comment">//清除HTML注释</span></span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,<span class="comment">//压缩HTML</span></span><br><span class="line">      collapseBooleanAttributes: <span class="literal">true</span>,<span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      removeEmptyAttributes: <span class="literal">true</span>,<span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      removeScriptTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">      removeStyleLinkTypeAttributes: <span class="literal">true</span>,<span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">      minifyJS: <span class="literal">true</span>,<span class="comment">//压缩页面JS</span></span><br><span class="line">      minifyCSS: <span class="literal">true</span>,<span class="comment">//压缩页面CSS</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/html'</span>))</span><br><span class="line">    .pipe(notify(&#123; <span class="attr">message</span>: <span class="string">'Html task complete'</span>&#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过watch-看修改的文件-自动执行相关命令"><a href="#通过watch-看修改的文件-自动执行相关命令" class="headerlink" title="通过watch 看修改的文件 自动执行相关命令"></a>通过watch 看修改的文件 自动执行相关命令</h3><p>用到了livereload和change<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Watch</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Watch .scss files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/styles/**/*.scss'</span>, [<span class="string">'styles'</span>]);</span><br><span class="line">  <span class="comment">// Watch .js files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/scripts/**/*.js'</span>, [<span class="string">'scripts'</span>]);</span><br><span class="line">  <span class="comment">// Watch image files</span></span><br><span class="line">  gulp.watch(<span class="string">'src/images/**/*'</span>, [<span class="string">'images'</span>]);</span><br><span class="line">  <span class="comment">// Create LiveReload server</span></span><br><span class="line">  livereload.listen();</span><br><span class="line">  <span class="comment">// Watch any files in dist/, reload on change</span></span><br><span class="line">  gulp.watch([<span class="string">'dist/**'</span>]).on(<span class="string">'change'</span>, livereload.changed);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="用reload-同步更新不用f5"><a href="#用reload-同步更新不用f5" class="headerlink" title="用reload 同步更新不用f5"></a>用reload 同步更新不用f5</h3><p>首先通过connect创建一个服务器，默认端口号8080，然后watch，最后reload<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//connect</span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  connect.server(&#123;</span><br><span class="line">    root: <span class="string">'public'</span>,</span><br><span class="line">    livereload: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line">  gulp.watch(<span class="string">'./public/**/*.*'</span>,[<span class="string">'reload'</span>]);</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'reload'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./public/*.html'</span>)</span><br><span class="line">   .pipe(connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three topics</title>
      <link href="/2018/11/01/three-topics/"/>
      <url>/2018/11/01/three-topics/</url>
      
        <content type="html"><![CDATA[<p><font size="36pt">度娘Super Fast</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首页包大小gzip后只有11.1k左右。耗时也就是500多毫秒<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首页是没有js和css外链的，不然会再发起多次请求。其他的首屏所需要的js与css，全部在上线前，编译时，编译内联至HTML中</p><p><font color="blue">1.缓存</font>（cookie，服务端传读local还是读写local）</p><p><font color="blue">2.外链合并</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个文件以自己文件内容生成的版本号为戳，标识自己的唯一性。每次服务端返回页面时，会把当前在服务器上的所有静态文件版本号，返给前端<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前端首屏加载完成后，会用这些版本号与local中进行一一对比，发现不一致的js/css，会一起发送一个合并请求。这样可以保证每个文件的缓存与版本迭代。同时，也避免了过多的外链。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;模板和数据，也会被缓存至localstorage中</p><p><font color="blue">3.使用iconfont</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多业务是不需要多彩色图的，这些icon就可以使用iconfont。</p><p><font color="blue">4.卡片的异步加载与缓存</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们首屏也就需要2张卡片，也将卡片内容(html/css/js)存储到了local中。异步拉取卡片的时候，如果卡片内容没有变。服务端就不要返回了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不在首屏的就要异步化！：触发时才会进行加载，采用按需加载。</p><p><font color="blue">5.少量静态文件的域名</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的logo与iconfont均是放在m.baidu.com域下的，这样节省了DNS的解析</p><p><font color="blue">6.极小的图片base64化（对于小于1k的图片）</font><br><br><br></p><p><font size="36pt">PC到移动，渲染:</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器就按照了980宽的方式，渲染出来页面图像。苹果再把这张图像，缩放一下，缩为屏幕大小。在手机上观察<em>**</em>的电脑版<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;图像是基于像素点的描述，放大后，之前图像的一个像素，被放大为多个像素。自然是会失真的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以更改的布局宽度：浏览器的渲染依据，layout viewport（ 屏幕有多宽，浏览器就照着多宽去去渲染）</p><p><font color="green"><strong>逻辑分辨率：就是照着宽度去写代码</strong></font></p><p><font color="green"><strong>物理分辨率：单位屏幕上的像素点变多了，貌似就更清晰了</strong></font><br>1.iphone3   iphone4 屏幕不变，像素密度变大 然后骗浏览器，为的是让布局不变，也就是让图片大小不变，然后iphone4里的图片大小和3里的一样，但是那张图片里的像素翻倍了<br>2.到了iphone6,屏幕变大了，然后就上调了逻辑分辨率（375/320），就是放大了页面和图片，然后物理分辨率（750/640）也上去了，但貌似清晰度没有变吧<br>3.iPhone6 plus扩大清晰度，屏幕大小还是和6一样，然后屏幕上的像素点又多了，也就是物理分辨率上去了，图片更加清楚了，然后为了好算什么的就用了缩放和像素什么的让物理分辨率成了逻辑分辨率的三倍，然后除以3去写代码</p><p><table><br>      <tr><br>         <th>iphone3   iphone4</th><br>         <th>屏幕不变</th><br>         <th>像素变大</th><br>         <th> 然后骗浏览器，为的是让布局不变，也就是让图片大小不变，然后iphone4里的图片大小和3里的一样，但是那张图片里的像素翻倍了</th><br>      </tr><br>      <tr><br>         <th>iphone6</th><br>         <th>屏幕变大</th><br>         <th>上调了逻辑分辨率（375/320），然后物理分辨率（750/640）也上去了</th><br>         <th>就是放大了页面和图片，但貌似清晰度没有变吧</th><br>      </tr><br>      <tr><br>         <th>iPhone6 plus</th><br>         <th>屏幕不变</th><br>         <th>物理分辨率上去了</th><br>         <th>图片更加清楚了，然后为了好算什么的就用了缩放和像素什么的让物理分辨率成了逻辑分辨率的三倍，然后除以3去写代码</th><br>      </tr><br></table><br><br><br></p><p><font size="36pt">iconfont:1.怎么做 2.浏览器的兼容性</font><br><br><br></p><p><font size="36pt">前端模板与渲染</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.页面级渲染：前端与后端的交互，浏览器端发出URL，后端返回一张拼好了的HTML串。（html中可能会混有一些php(或者php中混有一些html)。在服务端将数据与模板进行拼装，生成要返回浏览器端的html串。)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.异步的请求与新增模板：1）把数据拿到前端拼装成页面–貌似有模板、不变的+有更新的 2）在后端拼装直接把渲染生成的HTML传给前端，前端直接用<br><img src="/asset-an-image/IMG_0070.JPG" alt="show up please"><br>未完待续hiahia<br>笔记来源：<a href="https://segmentfault.com/a/1190000005882953" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005882953</a><br>欢迎吐槽、批评<br><a href="mailto:1282308134@qq.com? subject=tips &body=吐槽批评快来吧" target="_blank" rel="noopener">吐槽批评快来吧</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>asset an image</title>
      <link href="/2018/10/27/asset-an-image/"/>
      <url>/2018/10/27/asset-an-image/</url>
      
        <content type="html"><![CDATA[<p><img src="/asset-an-image/IMG_0229.JPG" alt="show up please"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git笔记</title>
      <link href="/2018/10/27/git/"/>
      <url>/2018/10/27/git/</url>
      
        <content type="html"><![CDATA[<font size="36pt">WORKFLOW</font><br><font size="“22pt”" color="blue">Working Directory&nbsp;&nbsp;&nbsp;&nbsp;Stage&nbsp;&nbsp;&nbsp;&nbsp;Master</font><br><font size="“14pt”"><br>1.git add file<br>2.git commit -m “    “<br>3.git reset HEAD^（版本区）<br>4.gut checkout – file（丢弃工作区的修改/其实是用版本库里的版本替换工作区的版本）<br>5.rm（工作区）<br>6.git rm （版本区）<br>  git rm –cached readme.txt(从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。)<br>7.git diff HEAD （工作区、版本区 比较）<br>8.git log<br>9.git reflog<br>10.git status</font><br><font size="“22pt”" color="blue">master&nbsp;&nbsp;&nbsp;&nbsp;branch</font><br><font size="“14pt”">1.git checkout -b dev（创建切换）/git branch dev（创建）<br>2.git branch（查看）<br>3.git checkout master/git checkout dev（切换）<br>4.git merge dev（合并）<br>5.git branch -d dev（删除）</font><br><font size="“22pt”" color="blue">local&nbsp;&nbsp;&nbsp;&nbsp;remote</font><br><font size="“14pt”">1.git remote add origin ___<br>2.git push -u origin master/git push origin master<br>3.git remote remove origin<br>4.删掉的文件同步到github<br>git add -A<br>它能stages所有文件，而之前用的<br>git add .<br>只能stages新文件和被修改文件，没有被删除文件</font><br><font size="“22pt”" color="blue">RemoteA&nbsp;&nbsp;&nbsp;&nbsp;RemoteB</font><br><font size="“14pt”">1.fork<br>2.PR</font><br><font size="“22pt”" color="blue">调解冲突</font><br><font size="“14pt”">1)<br>deva 先merge master<br>devb 后×<br>step1 手动改 step2 add commit<br>2)<br>deva 先merge master1 先push Remote<br>devb 后merge master2 后push×<br>step1 B pull Remote step2 push</font><p>多人协作<br>你从远程仓库克隆时，Git自动把本地的master和远程的master分支对应<br>查看远程仓库的信息<br>git remote/git remote -v（显示抓取（fetch）和推送(push)的地址）<br>git fetch origin master (From)<br>   git merge origin/master(更新到最新版本)/git pull(也行)<br>   如果你只是想看看本地分支和远程分支的差异，你可以使用下面的命令：git diff master origin/master<br>git push origin master<br>git push origin dev<br>小伙伴在另一台电脑克隆（他把钥匙添加到github了，就有权限push了）<br>他只看得到你的项目的master分支，他要在dev分支上开发 git checkout -b dev<br>git add env.txt<br>git commit -m “add env”<br>git push origin dev<br>冲突：没有指定本地dev分支与远程origin/dev分支的链接<br>git branch –set-upstream-to=origin/dev dev<br>git pull<br>手动改了以后，git commit，git push origin dev</p><p>覆盖<br>有时候由于某些误操作（如错误的将其他分支 merge 过来），导致远程分支错误，需要强制覆盖远程分支。可以使用命令 git push origin branch-name –force 来强制覆盖。<br>如果是团队开发，最好是使用 revert 命令来回滚 ，而不是覆盖。这样虽然历史记录不太干净，但是比较安全。回滚一个 merge 的命令如下:<br>git revert merge-commit-hash -m </p><p>git merge –no-ff -m “merge with no-ff” dev(通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息;–no-ff表示禁用Fast forward,用普通模式合并，合并后的历史有分支，能看出来曾经做过合并;-m参数，把commit描述写进去)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL</title>
      <link href="/2018/10/27/URL/"/>
      <url>/2018/10/27/URL/</url>
      
        <content type="html"><![CDATA[<font color="blue">URL(Uniform Resource Location)</font>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;统一资源定位器 网页地址的意思<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个网页都有只属于自己发URL地址（我们俗称网址）具有全球唯一性<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上网浏览网页，在鼠标点击之间连接到不同的URL的这个过程都显示在电脑的浏览器的地址栏里。<br><font color="blue">CDN（Content Delivery Network)</font>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;内容分发网络 依靠部署在各地的边缘服务器，通过中心平台的负载均衡，内容分发调度，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中度。<br><font color="blue">代理、网关</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对URL从一个浏览器到外部服务器和返回结果，传递一个请求的系统。<br><font color="blue">应用服务器</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过各种协议把商业逻辑到客户端的程序<br>对<font color="blue">TCP/UDP</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;传输层协议 请求<br><font color="blue">TLS</font>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安全传输层协议<br><font color="blue">LVS（Linux 虚拟服务器）</font>给后端ECS集群<br>对<font color="blue">HTTP</font>:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;超文本传输协议<br>给Tengine集群 再给后端ECS集群<br><font color="blue">DNS</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;整个系统架构分为流量层、应用层、数据层，利用 DNS 技术实现 GSLB（Global Server Load Balance，全局负载均衡），实现用户就近访问。<br><font color="blue">ISP</font>（Internet Service Provider，互联网服务提供商):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本地 DNS 地址<br><font color="blue">DHCP</font>（Dynamic Host Configuration Protocol):<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;动态主机配置协议<br><br><br><br><font size="“36pt”" color="blue">HTTP请求</font>：<br>在上一步我们通过 DNS 解析拿到服务器 IP 地址后，浏览器再通过系统调用 Socket 接口与服务器 443 端口进行通信，整个过程可以分解为<font color="green"><strong>建立连接、发送 HTTP 请求、返回 HTTP 响应、维持连接、释放连接</strong></font>五个部分<br><font color="blue">socket</font>：网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端称为一个socket。建立网络通信连接至少要一对端口号。<br><font size="“36pt”" color="blue">浏览器解析过程</font>：<br>现代浏览器是一个及其庞大的大型软件，在某种程度上甚至不亚于一个操作系统，它由多媒体支持、图形显示、GPU 渲染、进程管理、内存管理、沙箱机制、存储系统、网络管理等大大小小数百个组件组成.<br><br>一个 Browser 进程<br>多个 Renderer 进程<br>一个 GPU 进程<br>多个 NPAPI Render 进程<br>多个 Pepper Plugin 进程<br>而每个进程包括若干个线程：<br>一个主线程<br>在<font color="green"> Browser 进程中：渲染更新界面</font><br>在<font color="green">Renderer 进程中：使用持有的内核 Blink 实例解析渲染更新界面</font><br>一个 IO 线程<br>在 Browser 进程中：处理 IPC 通信和网络请求<br>在 Renderer 进程中：处理与 Browser 进程之间的 IPC 通信<br>一组专用线程<br>一个通用线程池<br><br><br><br><font size="“36pt”" color="blue">主流程</font>：<br>页面的解析工作是在 Renderer 进程中进行的，Renderer 进程通过在主线程中持有的 Blink 实例边接收边解析 HTML 内容。<br><font size="“36pt”" color="blue">渲染流程</font>：<br>DOM 树、RenderObject 树（也叫 Render 树）、 RenderLayer 树，1.同一个坐标系（比如 canvas、absolute）时 ，合并（由CPU）RenderLayer，   GraphicsLayer 树 2.当 RenderLayer 满足合成层条件（比如 transform，熟知的硬件加速）时，会有自己的 GraphicsLayer。每个 GraphicsLayer 都有一个 GraphicsContext 对象，负责将层绘制成位图作为纹理上传给 GPU，由 GPU 负责合成多个纹理，最终显示在屏幕上。<br><font size="“26pt”">笔记来源</font>：<a href="https://zhuanlan.zhihu.com/p/43369093" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43369093</a><br>和<font size="“26pt”">百度百科</font>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/17/hello-world/"/>
      <url>/2018/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
